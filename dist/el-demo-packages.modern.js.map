{"version":3,"file":"el-demo-packages.modern.js","sources":["../helpers/index.js"],"sourcesContent":["export const transformNullToString = (value) => {\n  if (typeof value === \"number\") return value.toString();\n  if (!value || value === \".\") return \"\";\n  return value.toString();\n};\n\nexport const amountToThousandSeparator = (value) => {\n  return transformNullToString(value)\n    .replace(/\\D/g, \"\")\n    .replace(/(\\d+?)(?=(\\d\\d)+(\\d)(?!\\d))(\\.\\d+)?/g, \"$1, \");\n};\n\nexport const toINRWords = (num) => {\n  num = transformNullToString(num).replace(/, /g, \"\");\n  const single = [\n    \"Zero\",\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const double = [\n    \"Ten\",\n    \"Eleven\",\n    \"Twelve\",\n    \"Thirteen\",\n    \"Fourteen\",\n    \"Fifteen\",\n    \"Sixteen\",\n    \"Seventeen\",\n    \"Eighteen\",\n    \"Nineteen\",\n  ];\n  const tens = [\n    \"\",\n    \"Ten\",\n    \"Twenty\",\n    \"Thirty\",\n    \"Forty\",\n    \"Fifty\",\n    \"Sixty\",\n    \"Seventy\",\n    \"Eighty\",\n    \"Ninety\",\n  ];\n  const formatTenth = (digit, prev) => {\n    return digit === 0\n      ? \"\"\n      : ` ${(digit === 1 && double[prev]) || tens[digit]}`;\n  };\n  const formatOther = (digit, next, denom) => {\n    // eslint-disable-next-line eqeqeq\n    return (\n      (digit != 0 && next != 1 ? ` ${single[digit]}` : \"\") +\n      (next != 0 || digit > 0 ? ` ${denom}` : \"\")\n    );\n  };\n  let res = \"\";\n  let index = 0;\n  let digit = 0;\n  let next = 0;\n  const words = [];\n  num += \"\";\n  if (Number.isNaN(parseInt(num, 10))) {\n    res = \"\";\n    return res;\n  }\n  if (parseInt(num, 10) > 0 && num.length <= 10) {\n    for (index = num.length - 1; index >= 0; index -= 1) {\n      digit = num[index] - 0;\n      next = index > 0 ? num[index - 1] - 0 : 0;\n      switch (num.length - index - 1) {\n        case 0:\n          words.push(formatOther(digit, next, \"\"));\n          break;\n        case 1:\n          words.push(formatTenth(digit, num[index + 1]));\n          break;\n        case 2:\n          words.push(\n            // eslint-disable-next-line eqeqeq\n            digit != 0\n              ? ` ${single[digit]} Hundred${\n                  num[index + 1] != 0 && num[index + 2] != 0 ? \" and\" : \"\"\n                }`\n              : \"\"\n          );\n          break;\n        case 3:\n          words.push(formatOther(digit, next, \"Thousand\"));\n          break;\n        case 4:\n          words.push(formatTenth(digit, num[index + 1]));\n          break;\n        case 5:\n          words.push(formatOther(digit, next, \"Lakh\"));\n          break;\n        case 6:\n          words.push(formatTenth(digit, num[index + 1]));\n          break;\n        case 7:\n          words.push(formatOther(digit, next, \"Crore\"));\n          break;\n        case 8:\n          words.push(formatTenth(digit, num[index + 1]));\n          break;\n        case 9:\n          words.push(\n            // eslint-disable-next-line eqeqeq\n            digit != 0\n              ? // eslint-disable-next-line eqeqeq\n                ` ${single[digit]} Hundred${\n                  ((num[index + 1] != 0 || num[index + 2] != 0) && \" and\") ||\n                  \" Crore\"\n                }`\n              : \"\"\n          );\n          break;\n        default:\n          words.push(\"\");\n      }\n    }\n    res = words.reverse().join(\"\");\n    return res !== \"\" ? `${res} rupees` : \"\";\n  }\n  res = \"\";\n  return res !== \"\" ? `${res} rupees` : \"\";\n};\n"],"names":["transformNullToString","value","toString","amountToThousandSeparator","replace","toINRWords","num","single","double","tens","formatTenth","digit","prev","formatOther","next","denom","res","index","words","Number","isNaN","parseInt","length","push","reverse","join"],"mappings":"AAAaA,MAAAA,EAAyBC,GACf,iBAAVA,GACNA,GAAmB,MAAVA,EADwBA,EAAMC,WACR,GAIzBC,EAA6BF,GACjCD,EAAsBC,GAC1BG,QAAQ,MAAO,IACfA,QAAQ,uCAAwC,QAGxCC,EAAcC,IACzBA,EAAMN,EAAsBM,GAAKF,QAAQ,MAAO,IAChD,MAAMG,EAAS,CACb,OACA,MACA,MACA,QACA,OACA,OACA,MACA,QACA,QACA,QAEIC,EAAS,CACb,MACA,SACA,SACA,WACA,WACA,UACA,UACA,YACA,WACA,YAEIC,EAAO,CACX,GACA,MACA,SACA,SACA,QACA,QACA,QACA,UACA,SACA,UAEIC,EAAc,CAACC,EAAOC,IACT,IAAVD,EACH,GACC,IAAc,IAAVA,GAAeH,EAAOI,IAAUH,EAAKE,KAE1CE,EAAc,CAACF,EAAOG,EAAMC,KAGpB,GAATJ,GAAsB,GAARG,EAAa,IAAGP,EAAOI,KAAW,KACxC,GAARG,GAAaH,EAAQ,EAAK,IAAGI,IAAU,IAG5C,IAAIC,EAAM,GACNC,EAAQ,EACRN,EAAQ,EACRG,EAAO,EACX,MAAMI,EAAQ,GAEd,GADAZ,GAAO,GACHa,OAAOC,MAAMC,SAASf,EAAK,KAE7B,OADAU,EAAM,GACCA,EAET,GAAIK,SAASf,EAAK,IAAM,GAAKA,EAAIgB,QAAU,GAAI,CAC7C,IAAKL,EAAQX,EAAIgB,OAAS,EAAGL,GAAS,EAAGA,GAAS,EAGhD,OAFAN,EAAQL,EAAIW,GAAS,EACrBH,EAAOG,EAAQ,EAAIX,EAAIW,EAAQ,GAAK,EAAI,EAChCX,EAAIgB,OAASL,EAAQ,GAC3B,KAAA,EACEC,EAAMK,KAAKV,EAAYF,EAAOG,EAAM,KACpC,MACF,KAAK,EAgBL,KAAK,EAML,OAMA,KAAA,EACEI,EAAMK,KAAKb,EAAYC,EAAOL,EAAIW,EAAQ,KAC1C,MA3BF,KAAA,EACEC,EAAMK,KAEK,GAATZ,EACK,IAAGJ,EAAOI,aACS,GAAlBL,EAAIW,EAAQ,IAA6B,GAAlBX,EAAIW,EAAQ,GAAU,OAAS,KAExD,IAEN,MACF,KAAA,EACEC,EAAMK,KAAKV,EAAYF,EAAOG,EAAM,aACpC,MAIF,KAAA,EACEI,EAAMK,KAAKV,EAAYF,EAAOG,EAAM,SACpC,MAIF,KAAK,EACHI,EAAMK,KAAKV,EAAYF,EAAOG,EAAM,UACpC,MAIF,OACEI,EAAMK,KAEK,GAATZ,EAEK,IAAGJ,EAAOI,aACW,GAAlBL,EAAIW,EAAQ,IAA6B,GAAlBX,EAAIW,EAAQ,GAAY,OACjD,WAEF,IAEN,MACF,QACEC,EAAMK,KAAK,IAIjB,OADAP,EAAME,EAAMM,UAAUC,KAAK,IACZ,KAART,EAAc,GAAEA,WAAe,GAGxC,OADAA,EAAM,GACS,KAARA,EAAc,GAAEA,WAAe"}